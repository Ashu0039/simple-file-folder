{"version":3,"sources":["constants.js","components/EntityIcon.jsx","components/Folder.jsx","components/File.jsx","components/TitleBar.jsx","components/NotFound.jsx","components/EmptyFolder.jsx","components/Explorer.jsx","initialData.js","App.js","serviceWorker.js","index.js"],"names":["ROOT","FILE","FOLDER","EntityIcon","_ref","icon","type","react_default","a","createElement","react_fontawesome_index_es","size","style","color","display","justifyContent","alignItems","flex","Folder","entity","select","selected","open","className","concat","onClick","onDoubleClick","id","components_EntityIcon","title","File","TitleBar","addFolder","addFile","selectedEntity","deleteSelectedEntity","renameEntity","unselect","canGoBack","back","openFolder","marginRight","cursor","Fragment","defaultProps","goBack","NotFound","react_router","to","EmptyFolder","DefaultEntity","RenderEntity","props","Object","esm_extends","components_Folder","components_File","Explorer_DefaultEntity","Explorer","createNewEntity","_ref4","fn","folderId","_this","match","params","uuid","parent","askNameForFolder","prompt","console","log","askNameForFile","history","push","_this2","this","unlisten","listen","location","action","entitySelected","_this3","_this$props","data","hasOwnProperty","components_NotFound","_getFolder","_ref2","getFolder","content","_ref3","children","map","c","getFolderContents","src_components_TitleBar","length","Explorer_RenderEntity","key","e","components_EmptyFolder","Component","initialData","root","folder1","file1","folder2","folder3","library","add","faFile","faFolder","faEdit","faTrash","faTimes","faArrowLeft","faFolderOpen","App","state","addNewEntityAndChildren","updatedData","objectSpread","oldParent","newChildren","toConsumableArray","newParent","setState","newFolder","newFile","newSelectedEntity","removeEntityAndItsChildren","entityId","i","childEntity","removeEntityAsChild","parentId","parentOfEntity","posOfEntity","findIndex","updatedChildren","slice","updatedParent","deleteEntity","uData","answer","trim","toLowerCase","updateEntityName","newName","updatedEntity","_this$state","path","render","src_components_Explorer","assign","Boolean","window","hostname","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee8b36b4.chunk.js","sourcesContent":["export const ROOT = 'root';\nexport const FILE = 'file';\nexport const FOLDER = 'folder';\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { FOLDER, FILE } from '../constants';\n\nconst EntityIcon = ({ type }) => {\n  let icon = '';\n  switch(type) {\n    case FOLDER:\n      icon = <FontAwesomeIcon icon=\"folder\" size=\"5x\" style={{ color: 'coral' }} />;\n      break;\n    case FILE:\n      icon = <FontAwesomeIcon icon=\"file\" size=\"5x\" style={{ color: 'cornflowerblue' }} />;\n      break;\n    default:\n      icon = 'UNKNOWN Type';\n  }\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flex: 1 }}>\n      { icon }\n    </div>\n  )\n}\n\nexport default EntityIcon;","import React from 'react';\n\nimport EntityIcon from './EntityIcon';\n\nimport './Entity.css';\n\nconst Folder = ({ entity, select, selected, open }) => (\n  <div className={`folder entity ${selected ? 'selected' : ''}`}\n    onClick={() => select(entity)}\n    onDoubleClick={() => open(entity.id)}\n  >\n    <EntityIcon type={entity.type} />\n    <div className=\"title\">{ entity.title }</div>\n  </div>\n);\n\nexport default Folder;\n","import React from 'react';\n\nimport EntityIcon from './EntityIcon';\n\nconst File = ({ entity, selected, select }) => (\n  <div className={`file entity ${selected ? 'selected' : ''}`}\n    onClick={() => select(entity)}\n  >\n    <EntityIcon type={entity.type} />\n    <div className=\"title\">{ entity.title }</div>\n  </div>\n);\n\nexport default File;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './TitleBar.css';\nimport { FOLDER } from '../constants';\n\nconst TitleBar = ({ title, addFolder, addFile, selectedEntity, deleteSelectedEntity, renameEntity, unselect, canGoBack, back, openFolder }) => (\n  <div className={`title-bar ${selectedEntity ? 'selected' : ''}`}>\n    <span className=\"title\">\n      {\n        !selectedEntity && canGoBack ? \n        <FontAwesomeIcon\n          onClick={() => back()}\n          icon=\"arrow-left\" \n          size=\"sm\"\n          style={{marginRight: 12, cursor: 'pointer' }}\n        /> : ''\n      }\n      { selectedEntity ? \n        <FontAwesomeIcon\n          onClick={() => unselect()}\n          icon=\"times\" \n          size=\"sm\"\n          style={{marginRight: 12, cursor: 'pointer' }}\n        />\n        : ''}\n      {title}\n    </span>\n    <div className=\"options\">\n      {\n        selectedEntity ? (\n          <>\n            {\n              selectedEntity.type === FOLDER ? (\n                <span onClick={() => openFolder()}>\n                  <FontAwesomeIcon icon=\"folder-open\" size=\"1x\" /> Open\n                </span>\n              ) : ''\n            }\n            <span onClick={() => renameEntity()}>\n              <FontAwesomeIcon icon=\"edit\" size=\"1x\" /> Rename\n            </span>\n            <span onClick={() => deleteSelectedEntity()}>\n              <FontAwesomeIcon icon=\"trash\" size=\"1x\" /> Delete\n            </span>\n          </>\n        ) : (\n          <>\n            <span onClick={() => addFolder()}>\n              <FontAwesomeIcon icon=\"folder\" size=\"1x\" /> Add Folder\n            </span>\n            <span onClick={() => addFile()}>\n              <FontAwesomeIcon icon=\"file\" size=\"1x\"/> Add File\n            </span>\n          </>\n        )\n      }\n    </div>\n  </div>\n);\n\nTitleBar.propTypes = {\n  title: PropTypes.string,\n  addFolder: PropTypes.func,\n  addFile: PropTypes.func,\n  selectedEntity: PropTypes.shape({}),\n  deleteSelectedEntity: PropTypes.func.isRequired,\n  renameEntity: PropTypes.func.isRequired,\n  unselect: PropTypes.func.isRequired,\n  canGoBack: PropTypes.bool,\n  goBack: PropTypes.func,\n};\n\nTitleBar.defaultProps = {\n  title: '',\n  addFolder: () => {},\n  addFile: () => {},\n  selectedEntity: null,\n  canGoBack: false,\n  goBack: () => {},\n};\n\nexport default TitleBar;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst NotFound = () => (\n  <Redirect to=\"/\" />\n);\n\nexport default NotFound;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nconst EmptyFolder = () => (\n  <div>\n    <FontAwesomeIcon icon=\"folder-open\" size=\"3x\" style={{ color: 'lightblue' }} />\n    <div>Nothing here</div>\n  </div>\n);\n\nexport default EmptyFolder;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\n\nimport './Explorer.css';\nimport { FOLDER, FILE, ROOT } from '../constants';\nimport Folder from './Folder';\nimport File from './File';\nimport TitleBar from './TitleBar';\nimport NotFound from './NotFound';\nimport EmptyFolder from './EmptyFolder';\n\nconst DefaultEntity = () => (\n  <div>Entity type not compatible</div>\n);\n\nconst RenderEntity = ({ ...props }) => {\n  const { entity } = props;\n  const { type } = entity;\n\n  switch(type) {\n    case FOLDER:\n      return <Folder {...props} />;\n    case FILE:\n      return <File {...props} />\n    default:\n      return <DefaultEntity />\n  }\n};\n\nconst getFolder = ({ folderId, data }) => {\n  // If there is some folderId return its content else return ROOT folder content\n  const folder = folderId ? data[folderId] : data[ROOT];\n\n  return folder;\n}\n\nconst getFolderContents = ({ children, data }) => {\n  const folderContent = children.map(c => data[c]);\n  return folderContent;\n}\n\nclass Explorer extends Component {\n  componentWillMount() {\n    this.unlisten = this.props.history.listen((location, action) => {\n      // Reset entity selected on route change\n      this.props.entitySelected(null);\n    });\n  }\n\n  componentWillUnmount() {\n      this.unlisten();\n  }\n\n  createNewEntity = ({ fn, title }) => {\n    const { folderId } = this.props.match.params;\n    fn({ id: uuid(), title, parent: folderId || ROOT });\n  }\n\n  askNameForFolder = () => {\n    const { addFolder } = this.props;\n    const title = prompt('Enter folder name', 'New Folder');\n\n    if (title) {\n      console.log('adding new folder --> ', title);\n      this.createNewEntity({ fn: addFolder, title });\n    }\n  }\n\n  askNameForFile = () => {\n    const title = prompt('Enter file name', 'New File');\n    const { addFile } = this.props;\n    if (title) {\n      console.log('adding new file --> ', title);\n      this.createNewEntity({ fn: addFile, title });\n    }\n  }\n\n  openFolder = (folderId) => {\n    console.log('open folder --> ', folderId);\n    this.props.history.push(folderId);\n  }\n\n  goBack = () => {\n    this.props.history.goBack();\n  }\n\n  render() {\n    const {\n      data,\n      entitySelected,\n      deleteSelectedEntity,\n      renameEntity,\n      selectedEntity,\n    } = this.props;\n\n    const { folderId } = this.props.match.params;\n\n    if (folderId && !data.hasOwnProperty(folderId)) {\n      return (\n        <NotFound />\n      )\n    }\n  \n    const { title, children } = getFolder({ folderId, data});\n    const content = getFolderContents({ children, data });\n  \n    return (\n      <>\n        <TitleBar\n          title={ selectedEntity ? selectedEntity.title : title}\n          addFolder={this.askNameForFolder}\n          addFile={this.askNameForFile}\n          selectedEntity={selectedEntity}\n          deleteSelectedEntity={deleteSelectedEntity}\n          renameEntity={renameEntity}\n          unselect={() => entitySelected(null)}\n          canGoBack={!!folderId}\n          back={this.goBack}\n          openFolder={() => selectedEntity.type === FOLDER && this.openFolder(selectedEntity.id)}\n        />\n        <div className=\"Explorer\">\n          {\n            content.length ? content.map(c => \n              <RenderEntity\n                key={c.id} \n                entity={c}\n                open={c.type === FOLDER ? this.openFolder : null}\n                select={(e) => entitySelected(e)}\n                selected={selectedEntity && selectedEntity.id === c.id}\n              />)\n              : <EmptyFolder />\n          }\n        </div>\n      </>\n    );\n  }\n}\n\nExplorer.propTypes = {\n  data: PropTypes.shape({}),\n  addFolder: PropTypes.func,\n  addFile: PropTypes.func,\n  entitySelected: PropTypes.func,\n  selectedEntity: PropTypes.shape({}),\n  deleteSelectedEntity: PropTypes.func.isRequired,\n  renameEntity: PropTypes.func.isRequired,\n};\n\nExplorer.defaultProps = {\n  data: {},\n  addFolder: () => {},\n  addFile: () => {},\n  entitySelected: () => {},\n  selectedEntity: null,\n};\n\nexport default Explorer;\n","import { ROOT, FILE, FOLDER } from './constants';\n\nconst initialData = {\n  root : {\n    id: ROOT,\n    title: 'Home',\n    type: FOLDER,\n    parent: null,\n    children: [ 'folder1' ],\n  },\n  folder1: {\n    id: 'folder1',\n    title: 'Folder 1',\n    type: FOLDER,\n    parent: ROOT,\n    children: [ 'file1', 'folder2' ],\n  },\n  file1: {\n    id: 'file1',\n    title: 'File 1',\n    parent: 'folder1',\n    type: FILE,\n  },\n  folder2: {\n    id: 'folder2',\n    title: 'Folder 2',\n    type: FOLDER,\n    parent: 'folder1',\n    children: ['folder3'],\n  },\n  folder3: {\n    id: 'folder3',\n    title: 'Folder 3',\n    type: FOLDER,\n    parent: 'folder2',\n    children: [],\n  }\n};\n\nexport default initialData;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFile, faFolder, faEdit, faTrash, faTimes, faArrowLeft, faFolderOpen } from '@fortawesome/free-solid-svg-icons'\n\nimport Explorer from './components/Explorer';\nimport initialData from './initialData';\n\nimport './App.css';\nimport { FOLDER, FILE } from './constants';\n\nlibrary.add(faFile, faFolder, faEdit, faTrash, faTimes, faArrowLeft, faFolderOpen);\n\nclass App extends Component {\n  state = {\n    data: initialData,\n    selectedEntity: null,\n  }\n\n  addNewEntityAndChildren = (entity) => {\n    console.log('adding new entity ==> ', entity);\n    const { id, parent } = entity;\n    const { data } = this.state;\n\n    const updatedData = { ...data };\n    // Add new entity\n    updatedData[id] = entity;\n\n    // Add new children in parent folder\n    const oldParent = updatedData[parent];\n    const { children } = oldParent;\n    const newChildren =  [...children, id];\n    const newParent = { ...oldParent, children: newChildren };\n    updatedData[parent] = newParent;\n\n    this.setState({ data: updatedData });\n  }\n\n  addFolder = ({ id, title, parent }) => {\n    const newFolder = {\n      id,\n      title,\n      type: FOLDER,\n      parent,\n      children: [],\n    };\n\n    this.addNewEntityAndChildren(newFolder);\n  }\n\n  addFile = ({ id, title, parent }) => {\n    const newFile = {\n      id,\n      title,\n      type: FILE,\n      parent,\n    };\n\n    this.addNewEntityAndChildren(newFile);\n  }\n\n  entitySelected = (entity) => {\n    console.log('select entity --> ', entity);\n    const { selectedEntity } = this.state;\n    // Reset selection if same entity clicked again\n    const newSelectedEntity = selectedEntity && entity && selectedEntity.id === entity.id ? null : entity;\n    this.setState({ selectedEntity: newSelectedEntity });\n  }\n\n  removeEntityAndItsChildren = (data, entityId) => {\n    let updatedData = { ...data };\n    const entity = updatedData[entityId];\n\n    const { children } = entity;\n\n    if (children || children) {\n      for(let i=0; i<children.length;i++) {\n        const childEntity = children[i];\n        updatedData = this.removeEntityAndItsChildren(updatedData, childEntity);\n      }\n    }\n\n    delete updatedData[entityId];\n\n    return updatedData;\n  }\n\n  removeEntityAsChild = ({ data, parentId, entityId }) => {\n    const updatedData = { ...data };\n    const parentOfEntity = updatedData[parentId];\n    const { children } = parentOfEntity;\n    const posOfEntity = children.findIndex(i => i === entityId);\n\n    if (posOfEntity > -1) {\n      const updatedChildren = [...children.slice(0, posOfEntity), ...children.slice(posOfEntity + 1)];\n      const updatedParent = {\n        ...parentOfEntity,\n        children: updatedChildren,\n      };\n      updatedData[parentId] = updatedParent;\n    }\n    return updatedData;\n  }\n\n  deleteEntity = (entity) => {\n    const { data } = this.state;\n    // Remove entity as a children from dataset\n    const uData = this.removeEntityAsChild({ data, parentId: entity.parent, entityId: entity.id });\n    // Remove entity and its children from dataset\n    const updatedData = this.removeEntityAndItsChildren(uData, entity.id);\n    this.setState({ data: updatedData });\n  }\n\n  deleteSelectedEntity = () => {\n    const { selectedEntity } = this.state;\n    if (selectedEntity) {\n      const answer = prompt(`Please enter YES if you want to delete ${selectedEntity.title}`);\n      if (answer && answer.trim().toLowerCase() === 'yes') {\n        console.log('delete selected entity --> ', selectedEntity);\n        this.deleteEntity(selectedEntity);\n      }\n    }\n    this.setState({ selectedEntity: null });\n  }\n\n  updateEntityName = ({ id, newName }) => {\n    const { data } = this.state;\n    const updatedData = { ...data };\n    const entity = updatedData[id];\n    const updatedEntity = {\n      ...entity,\n      title: newName,\n    };\n\n    updatedData[id] = updatedEntity;\n    this.setState({ data: updatedData });\n  }\n\n  renameEntity = () => {\n    const { selectedEntity } = this.state;\n    if (selectedEntity) {\n      const newName = prompt('Enter new name', selectedEntity.title);\n      if (newName) {\n        this.updateEntityName({ id: selectedEntity.id, newName });\n      }\n    }\n    this.setState({ selectedEntity: null });\n  }\n  \n  render() {\n    const { data, selectedEntity } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Route path=\"/:folderId?\"\n          render={\n            (props) =>\n            <Explorer\n              data={data}\n              addFile={this.addFile}\n              addFolder={this.addFolder}\n              entitySelected={this.entitySelected}\n              selectedEntity={selectedEntity}\n              deleteSelectedEntity={this.deleteSelectedEntity}\n              renameEntity={this.renameEntity}\n              {...props}\n            />\n          } \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}